//
//  AppDelegate.swift
//  JustHive
//
//  Created by Simply Technologies on 8/23/16.

import UIKit

@UIApplicationMain
@objc class AppDelegate: UIResponder, UIApplicationDelegate {

  var window: UIWindow?
  var splashScreen: UIView!

  func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject : AnyObject]?) -> Bool {

    window = UIWindow(frame: UIScreen.mainScreen().bounds)

//    UIApplication.sharedApplication().registerForRemoteNotifications()
//    UIApplication.sharedApplication().registerUserNotificationSettings(mySettings!)
//    UIApplication.sharedApplication.registerUserNotificationSettings

//    if launchOptions != nil {
//      var msg = "\(launchOptions)"
//      print("\(msg)")
//      self.createAlert(msg)
//    }

//    for family: String in UIFont.familyNames() {
//        print("\(family)")
//        for name: String in UIFont.fontNamesForFamilyName(family) {
//            print(" \(name)")
//        }
//    }


    /**
     * Loading JavaScript code - uncomment the one you want.
     *
     * OPTION 1
     * Load from development server. Start the server from the repository root:
     *
     * $ npm start
     *
     * To run on device, change `localhost` to the IP address of your computer
     * (you can get this by typing `ifconfig` into the terminal and selecting the
     * `inet` value under `en0:`) and make sure your computer and iOS device are
     * on the same Wi-Fi network.
     */

    //   let jsCodeLocation = NSBundle.mainBundle().URLForResource("main", withExtension: "jsbundle")
    let jsCodeLocation = NSURL(string:"http://192.168.1.59:8081/index.ios.bundle?platform=ios&dev=true")


    /**
     * OPTION 2
     * Load from pre-bundled file on disk. The static bundle is automatically
     * generated by the "Bundle React Native code and images" build step when
     * running the project on an actual device or running the project on the
     * simulator in the "Release" build configuration.
     */

    let rootView = RCTRootView(bundleURL: jsCodeLocation, moduleName: "JustHive", initialProperties: nil, launchOptions: launchOptions)

    let rootViewController = UIViewController()
    rootViewController.view = rootView

    self.window!.rootViewController = rootViewController
    self.window!.makeKeyAndVisible()

    configureSplashScreen()

    return true
  }


  func application(application: UIApplication, didRegisterUserNotificationSettings notificationSettings: UIUserNotificationSettings) {
    RCTPushNotificationManager.didRegisterUserNotificationSettings(notificationSettings)
  }

  func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {
   NSLog("deviceToken: %@", deviceToken);
    RCTPushNotificationManager.didRegisterForRemoteNotificationsWithDeviceToken(deviceToken)
  }
  // Required for the notification event.

  func application(application: UIApplication, didReceiveRemoteNotification notification: [NSObject : AnyObject]) {
    application.applicationIconBadgeNumber = application.applicationIconBadgeNumber + 1
    RCTPushNotificationManager.didReceiveRemoteNotification(notification)
  }

  func application(application: UIApplication, didReceiveLocalNotification notification: UILocalNotification) {
    RCTPushNotificationManager.didReceiveLocalNotification(notification)
  }

  func application(application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: NSError) {
    print("Failed To Register \(error)")
  }

  func configureSplashScreen() {
    if let launchScreen = NSBundle.mainBundle().loadNibNamed("LaunchScreen", owner: self, options: nil)?.first {
      NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(preRemove), name: RCTContentDidAppearNotification, object: nil)

      splashScreen = launchScreen as! UIView
      splashScreen.center = window!.center
      window?.addSubview(splashScreen!)
    }
  }

  func preRemove() {
    NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: #selector(removeSplashScreen), userInfo: nil, repeats: false)
  }

  func removeSplashScreen() {
    UIView.transitionWithView(splashScreen!, duration: 0.1, options: .TransitionCrossDissolve, animations: {
      self.splashScreen.hidden = true
      }, completion: { (finished: Bool) in
        self.splashScreen!.removeFromSuperview()
    })
  }
  

//  func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {
//    application.applicationIconBadgeNumber = 0
//    var msg = "\(userInfo)"
//    print("\(msg)")
//    self.createAlert(msg)
//  }
//
//  func createAlert(msg: String) {
//    var alertView = UIAlertView(title: "Message Received", message: "\(msg)", delegate: self, cancelButtonTitle: "OK", otherButtonTitles: "")
//    alertView!.show()
//  }
//
//  func application(application: UIApplication, handleActionWithIdentifier identifier: String, forRemoteNotification notification: [NSObject : AnyObject], completionHandler: () -> Void) {
//    if (identifier == "READ_IDENTIFIER") {
//      var msg = "\("read")"
//      self.createAlert(msg)
//    }
//    else if (identifier == "DELETE_IDENTIFIER") {
//      var msg = "\("delete")"
//      self.createAlert(msg)
//    }
//
//    completionHandler()
//  }
}
